/**
 * XSS:跨站脚本攻击
 * 攻击者想尽一切办法将可执行的代码注入到网页中
 * 
 * 存储型（server端）
 * 场景：见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。 ---恶意代码直接提交到数据库中
    攻击步骤：
      i）攻击者将恶意代码提交到目标网站的数据库中
      ii）用户打开目标网站时，服务端将恶意代码从数据库中取出来，拼接在HTML中返回给浏览器
      iii）用户浏览器在收到响应后解析执行，混在其中的恶意代码也同时被执行
      iv）恶意代码窃取用户数据，并发送到指定攻击者的网站，或者冒充用户行为，调用目标网站的接口，执行恶意操作

    反射型（server端） --- 恶意代码通过前端URL参数的形式提交到数据库中
    与存储型的区别在于，存储型的恶意代码存储在数据库中，反射型的恶意代码在URL上
    场景：通过 URL 传递参数的功能，如网站搜索、跳转等。
    
    Dom型（浏览器端）--- 恶意代码通过URL参数解析功能直接在前端执行，不通过服务器
    通过前端URL参数传递的功能，往URL中拼接恶意代码，浏览器通过js解析并执行


    预防方案：
    1.对数据进行严格的编码输出（这一点框架已经），避免使用v-html/dangerouslySetInnerHTML
    2.前端在输入时做校验，比如一些常见的数字、URL、电话号码、邮箱地址等等，过滤恶意代码
    3.开启浏览器防御http-only，禁止js操作cookies，这样即使受到攻击了，攻击者也无法读到cookies
 */



/**
 * CSRF：跨站请求伪造
 * 
 * 攻击流程举例
    i）受害者登录 a.com，并保留了登录凭证（Cookie）
    ii）攻击者引诱受害者访问了b.com
    iii）b.com 向 a.com 发送了一个请求：a.com/act=xx浏览器会默认携带a.com的Cookie
    iv）a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求
    v）a.com以受害者的名义执行了act=xx
    vi）攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作

    预防方案：
    1.同源检测
    2.使用token方式
    3.双重cookie
 */